; ARRANGE ELEMENTS OF MEMORY ARRAY IN ASCENDING ORDER
; [BUBBLE SORT]

ORG 0000H					; ORIGINATE
AJMP START					; JUMP TO THE LABEL START

START:
	MOV A, #12				; LENGTH OF ARRAY. CAN ENTER IN DECIMAL AS WELL.
	DEC A					; [N-1] PASSES IN BUBBLE SORT
	MOV 30H, A				; COPY LENGTH AT ADDRESS (30H). TO BE USED AS A FIXED DATA.
	
NXT_PSS:
	; RELOAD (R7) AND (R6) WITH THE LENGTH OF THE ARRAY
	MOV R7, 30H				; NOT REQUIRED?
	MOV R6, 30H
	
	MOV R0, #50H			; STARTING LOCATION OF THE ARRAY IN (R0). BUBBLING FROM LOWEST [FIXED] TO HIGHEST INDEX [VARYING].

NXT_CMP:
	MOV A, @R0				; GET DATA FROM THE ARRAY
	MOV R3, A				; DUPLICATE THE DATA TO (R3)
	INC R0					; INCREMENT TO THE NEXT LOCATION IN THE ARRAY
	MOV 0F0H, @R0			; DUPLICATE NEXT CONTENTS TO REG. B
	CLR C					; CLEAR THE CARRY. SO THAT A ISN'T DECREMENTED WITH THE BORROW.
	SUBB A, B				; COMPARE A AND B
	
	; CARRY => B IS GREATER THAN A. NO SWAP REQUIRED.
	JC DOWN
	
	; NO CARRY => A IS GREATER THAN B. SWAP REQUIRED.
	MOV A, R3				; (R3) HAD THE COPY OF THE ORIGINAL DATA BACKED UP, AT (R0)
	MOV @R0, A				; BUBBLE IT UP. (R0) POINTS TO THE NEXT INDEX.
	DEC R0					; DECREMENT POINTER TO TEMPORARILY USE FOR THE SWAP
	MOV @R0, 0F0H			; THE ORIGINAL CONTENTS OF THE LOWER NUMBER WERE IN (B)
	INC R0					; INCREMENT FOR NEXT PASS
	
DOWN:
	DJNZ R6, NXT_CMP		; DO (R6) COMPARISIONS IN EACH PASS
	DJNZ 30H, NXT_PSS		; (@30H) CONTAINS THE PASS COUNTER
	
HERE:
	SJMP HERE				; LOGICAL END
	END
