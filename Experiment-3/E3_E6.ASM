; CONVERT 2-DIGIT BCD IN LOCATION XX50 INTO HEXADECIMAL AND STORE THE HEXADECIMAL EQUIVALENT IN NEXT MEMORY LOCATION.

ORG 0000H				; ORIGINATE
AJMP START				; JUMP TO THE LABEL START

START:
	MOV DPTR, #1050H	; LOAD DATA LOCATION
	MOVX A, @DPTR		; GET INPUT DATA. 2-DIGIT BCD IS ONE BYTE LONG
	ANL A, #0FH			; MASK THE UPPER NIBBLE. RETURNS LOWER NIBBLE
	MOV R0, A			; SAVE THE LOWER NIBBLE IN (R0)
	MOVX A, @DPTR		; RESTORE INPUT DATA
	ANL A, #0F0H		; MASK THE LOWER NIBBLE. RETURNS UPPER NIBBLE
	CLR C				; CLEAR CARRY
	
	; ROTATE RIGHT WITH CARRY 4 TIMES. EFFECTIVELY SWAPS LOWER AND UPPER NIBBLES, BUT WITH AN ADDITIONAL CARRY [NOT REQUIRED?]
	RRC A
	RRC A
	RRC A
	RRC A
	; LOWER NIBBLE OF CURRENT (A) IS THE PREVIOUS UPPER NIBBLE
	
	RLC A				; ROTATE LEFT WITH CARRY, ONCE. MULTIPLIES BY 2
	MOV 0F0H, A			; SAVE IN B
	
	; ROTATE LEFT WITH CARRY TWO MORE TIMES. MULTIPLIES BY 8 EFFECTIVELY, IN THE END
	RLC A
	RLC A
	
	ADD A, B			; [x2] + [x8] => [x10] DECIMAL
	ADD A, R0			; ADD THE LOWER NIBBLE, ~HEXADECIMALLY. [WHY?]
	
	; STORE IN NEXT LOCATION
	INC DPTR
	MOVX @DPTR, A

HERE:
	SJMP HERE			; LOGICAL END
	END
